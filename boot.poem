include "fantasyinternet.poem/log.poem"
include "fantasyinternet.poem/display.poem"
include "fantasyinternet.poem/audio.poem"
include "fantasyinternet.poem/navigation.poem"
include "fantasyinternet.poem/cli.poem"
include "fantasyinternet.poem/input.poem"
include "fantasyinternet.poem/filesystem.poem"
include "fantasyinternet.poem/process.poem"
include "fantasyinternet.poem/buffer_stack.poem"
include "./_api_proxy.wast"

var state = 0
var orig
var pwd
var cmd_path = array
var cmd_candidates = 0
var cmd_best_req
var cmd_best_wasm
var command

export "init" init
  set_display_mode 0 80 20
  orig = get_origin_url
  array_push cmd_path orig + "cmd/"
  array_push cmd_path "./"
  println "System ready."
  println "Type 'help' to see available commands."

export "step" step
  if state == 0
    pwd = get_base_url
    set_display_mode 0 80 20
    set_step_interval -1
    focus_input 1
    for channel in range 0 16
      stop_tone channel
    println "\n\u001b[36m" + pwd
    print "\u001b[37;1m$ \u001b[0m"
    state++
  if state == 1
    if (command = read_line) != null
      var args = parse_command command
      if args:0
        load_program args:0
        state++
      else
        state = 0
  if state == 3
    if (process_status current_pid) == 2
      step_process current_pid
    if (process_status current_pid) < 1
      state = 0
      step

export "display" display
  if state == 3
    if (process_status current_pid) == 2
        display_process current_pid

export "break" break
  if state == 3
    kill_process current_pid
    step
  else
    shutdown

func load_program name
  cmd_best_wasm = null
  cmd_candidates = 0
  for path in cmd_path
    cmd_candidates++
    read path + name + ".wasm" #run_program

func run_program success wasm req_id
  if cmd_candidates > 0
    cmd_candidates--
  if (size_of wasm)
    if req_id > cmd_best_req
      cmd_best_req = req_id
      cmd_best_wasm = wasm
  if cmd_candidates == 0
    var args = parse_command command
    if cmd_best_wasm
      current_pid = load_process wasm
      state++
    else
      println args:0 + ": command not found"
      state = 0
    step

export "env.getArgs" env.getArgs
  push_from_memory command
  return size_of command
