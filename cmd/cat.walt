// import functions from the fantasy internet API, documented at https://fantasyinternet.github.io/api
import { pushFromMemory: Fii_ } from "env";
import {"break" : F_ as exit} from "env";
import { read: Fc_i } from "env";
import { print: F_ } from "env";
import { getArg: Fi_i } from "env";
import { getString: Fii_ } from "env";
import { getStringLength: Fi_i } from "env";
// Function signatures needs to be declared thusly
type F_ = () => void;
type Fi_ = (i32) => void;
type Fi_i = (i32) => i32;
type Fii_ = (i32, i32) => void;
type Fiii_ = (i32, i32, i32) => void;
type Fc_i = (Function) => i32;

// Setup memory and table.
export const memory: Memory = { initial: 1 };
export const table: Table = { initial: 1, element: anyfunc };

// callback will be called once file is read.
function readCB(success: i32) {
  if (success) {
    print();
  } else {
    pushFromMemory(-1, -1);
  }
  exit();
}

// This function will be exported and called at startup
export function init(): void {
  let cd: i32 = "./";
  let strId: i32 = getArg(1);
  let strLen: i32 = getStringLength(strId);
  getString(strId, cd + 3);
  pushFromMemory(cd + 1, strLen + 2);
  strId = read(readCB);
};

