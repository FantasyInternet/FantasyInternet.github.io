// import functions from the fantasy internet API, documented at https://fantasyinternet.github.io/api
import { pushFromMemory: Fii_ } from "env";
import { "break" : F_ as exit } from "env";
import { print: F_ } from "env";
// Function signatures needs to be declared thusly
type F_ = () => void;
type Fi_ = (i32) => void;
type Fi_i = (i32) => i32;
type Fii_ = (i32, i32) => void;
type Fiii_ = (i32, i32, i32) => void;

// Setup memory.
export const memory: Memory = { initial: 1 };

// This function will be exported and called at startup
export function init(): void {
  let nl: i32 = "
  ";
  let str: i32 = "Commands available:";
  pushFromMemory(str + 1, i32.load8_u(str)); print(); pushFromMemory(nl + 1, 1); print();
  pushFromMemory(nl + 1, 1); print();
  str = "cd <dir>         Change directory.";
  pushFromMemory(str + 1, i32.load8_u(str)); print(); pushFromMemory(nl + 1, 1); print();
  str = "ls               List directory contents.";
  pushFromMemory(str + 1, i32.load8_u(str)); print(); pushFromMemory(nl + 1, 1); print();
  str = "cat <filename>   Print file contents.";
  pushFromMemory(str + 1, i32.load8_u(str)); print(); pushFromMemory(nl + 1, 1); print();
  str = "less <filename>  Print file line by line.";
  pushFromMemory(str + 1, i32.load8_u(str)); print(); pushFromMemory(nl + 1, 1); print();
  str = "show <filename>  Show image file.";
  pushFromMemory(str + 1, i32.load8_u(str)); print(); pushFromMemory(nl + 1, 1); print();
  pushFromMemory(nl + 1, 1); print();
  exit();
};
